{
  "address": "0x4225Ac103671126981da70Be44eDB476F3253B7D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lendingPoolAddressesProviderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ape",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "apeAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "apeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "Ape",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING_POOL",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_DATA_PROVIDER_LOOKUP",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "apeAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "ape",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAaveAssetReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentLiquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentVariableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentStableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "aTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInEth",
          "type": "uint256"
        }
      ],
      "name": "getAssetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ape",
          "type": "address"
        }
      ],
      "name": "getAvailableBorrowInAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "apeAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levers",
          "type": "uint256"
        }
      ],
      "name": "superApe",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "apeAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "unwindApe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e56eeb387d25eeac23e488c97ea5a49049b801e4cf4a07cd9d0f5ec0006cd86",
  "receipt": {
    "to": null,
    "from": "0x4f210933EEeE8631D50105935bdEf4279eEee220",
    "contractAddress": "0x4225Ac103671126981da70Be44eDB476F3253B7D",
    "transactionIndex": 29,
    "gasUsed": "2052445",
    "logsBloom": "0x
    "blockHash": "0x9352507b5de20b5d0761270dc2205bd8a67d2ee88215c1431d44bfd28ac35051",
    "transactionHash": "0x3e56eeb387d25eeac23e488c97ea5a49049b801e4cf4a07cd9d0f5ec0006cd86",
    "logs": [],
    "blockNumber": 6408377,
    "cumulativeGasUsed": "17203955",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x012bAC54348C0E635dCAc9D5FB99f06F24136C9A",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "numDeployments": 2,
  "solcInputHash": "828034386a5eeb7cd0541d87f7f0e778",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPoolAddressesProviderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ape\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"apeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"Ape\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_DATA_PROVIDER_LOOKUP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"ape\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAaveAssetReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInEth\",\"type\":\"uint256\"}],\"name\":\"getAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ape\",\"type\":\"address\"}],\"name\":\"getAvailableBorrowInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levers\",\"type\":\"uint256\"}],\"name\":\"superApe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"unwindApe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveApe.sol\":\"AaveApe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/AaveApe.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./AaveUniswapBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract AaveApe is AaveUniswapBase {\\n\\n  using SafeMath for uint256;\\n\\n  constructor(address lendingPoolAddressesProviderAddress, address uniswapRouterAddress) AaveUniswapBase(lendingPoolAddressesProviderAddress, uniswapRouterAddress) public {}\\n\\n  event Ape(address ape, string action, address apeAsset, address borrowAsset, uint256 borrowAmount, uint256 apeAmount, uint256 interestRateMode);\\n\\n  // Gets the amount available to borrow for a given address for a given asset\\n  function getAvailableBorrowInAsset(address borrowAsset, address ape) public view returns (uint256) {\\n    ( ,,uint256 availableBorrowsETH,,,) = LENDING_POOL().getUserAccountData(ape);\\n    return getAssetAmount(borrowAsset, availableBorrowsETH);\\n  }\\n\\n  // Converts an amount denominated in ETH into an asset based on the Aave oracle\\n  function getAssetAmount(address asset, uint256 amountInEth) public view returns (uint256) {\\n    uint256 assetPrice = getPriceOracle().getAssetPrice(asset);\\n    (uint256 decimals ,,,,,,,,,) = getProtocolDataProvider().getReserveConfigurationData(asset);\\n    uint256 assetAmount = amountInEth.mul(10**decimals).div(assetPrice);\\n    return assetAmount;\\n  }\\n\\n  // 1. Borrows the maximum amount available of a borrowAsset (in the designated interest rate mode)\\n  // Note: requires the user to have delegated credit to the Aave Ape Contract\\n  // 2. Converts it into apeAsset via Uniswap\\n  // 3. Deposits that apeAsset into Aave on  behalf of the borrower\\n  function ape(address apeAsset, address borrowAsset, uint256 interestRateMode) public returns (bool) {\\n\\n      // Get the maximum amount available to borrow in the borrowAsset\\n      uint256 borrowAmount = getAvailableBorrowInAsset(borrowAsset, msg.sender);\\n\\n      require(borrowAmount > 0, \\\"Requires credit on Aave!\\\");\\n\\n      ILendingPool _lendingPool = LENDING_POOL();\\n\\n      // Borrow from Aave\\n      _lendingPool.borrow(\\n        borrowAsset,\\n        borrowAmount,\\n        interestRateMode,\\n        0,\\n        msg.sender\\n      );\\n\\n      // Approve the Uniswap Router on the borrowed asset\\n      IERC20(borrowAsset).approve(UNISWAP_ROUTER_ADDRESS, borrowAmount);\\n\\n      // Execute trade on Uniswap\\n      address[] memory path = new address[](2);\\n      path[0] = borrowAsset;\\n      path[1] = apeAsset;\\n\\n      uint[] memory amounts = UNISWAP_ROUTER.swapExactTokensForTokens(borrowAmount, 0, path, address(this), block.timestamp + 5);\\n\\n      // get the output amount, approve the Lending Pool to move that amount of erc20 & deposit\\n      uint outputAmount = amounts[amounts.length - 1];\\n      IERC20(apeAsset).approve(ADDRESSES_PROVIDER.getLendingPool(), outputAmount);\\n\\n      _lendingPool.deposit(\\n        apeAsset,\\n        outputAmount,\\n        msg.sender,\\n        0\\n      );\\n\\n      emit Ape(msg.sender, 'open', apeAsset, borrowAsset, borrowAmount, outputAmount, interestRateMode);\\n\\n      return true;\\n  }\\n\\n  function superApe(address apeAsset, address borrowAsset, uint256 interestRateMode, uint levers) public returns (bool) {\\n\\n    // Call \\\"ape\\\" for the number of levers specified\\n    for (uint i = 0; i < levers; i++) {\\n      ape(apeAsset, borrowAsset, interestRateMode);\\n    }\\n\\n    return true;\\n  }\\n\\n  function uniswapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address fromAsset,\\n    address toAsset\\n  ) internal returns (uint[] memory amounts) {\\n\\n    // Approve the transfer\\n    IERC20(fromAsset).approve(UNISWAP_ROUTER_ADDRESS, amountInMax);\\n\\n    // Prepare and execute the swap\\n    address[] memory path = new address[](2);\\n    path[0] = fromAsset;\\n    path[1] = toAsset;\\n\\n    return UNISWAP_ROUTER.swapTokensForExactTokens(amountOut, amountInMax, path, address(this), block.timestamp + 5);\\n  }\\n\\n  // Unwind a position (long apeAsset, short borrowAsset)\\n  function unwindApe(address apeAsset, address borrowAsset, uint256 interestRateMode) public {\\n\\n    // Get the user's outstanding debt\\n    (,uint256 stableDebt, uint256 variableDebt,,,,,,) = getProtocolDataProvider().getUserReserveData(borrowAsset, msg.sender);\\n\\n    uint256 repayAmount;\\n    if(interestRateMode == 1) {\\n      repayAmount = stableDebt;\\n    } else if (interestRateMode == 2) {\\n      repayAmount = variableDebt;\\n    }\\n\\n    require(repayAmount > 0, \\\"Requires debt on Aave!\\\");\\n\\n    // Prepare the flashLoan parameters\\n    address receiverAddress = address(this);\\n\\n    address[] memory assets = new address[](1);\\n    assets[0] = borrowAsset;\\n\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = repayAmount;\\n\\n    // 0 = no debt, 1 = stable, 2 = variable\\n    uint256[] memory modes = new uint256[](1);\\n    modes[0] = 0;\\n\\n    address onBehalfOf = address(this);\\n    bytes memory params = abi.encode(msg.sender, apeAsset, interestRateMode);\\n    uint16 referralCode = 0;\\n\\n    LENDING_POOL().flashLoan(\\n        receiverAddress,\\n        assets,\\n        amounts,\\n        modes,\\n        onBehalfOf,\\n        params,\\n        referralCode\\n    );\\n\\n  }\\n\\n  // This is the function that the Lending pool calls when flashLoan has been called and the funds have been flash transferred\\n  function executeOperation(\\n          address[] calldata assets,\\n          uint256[] calldata amounts,\\n          uint256[] calldata premiums,\\n          address initiator,\\n          bytes calldata params\\n      )\\n          external\\n          returns (bool)\\n      {\\n        require(msg.sender == ADDRESSES_PROVIDER.getLendingPool(), 'only the lending pool can call this function');\\n        require(initiator == address(this), 'the ape did not initiate this flashloan');\\n\\n        // Calculate the amount owed back to the lendingPool\\n        address borrowAsset = assets[0];\\n        uint256 repayAmount = amounts[0];\\n        uint256 amountOwing = repayAmount.add(premiums[0]);\\n\\n        // Decode the parameters\\n        (address ape, address apeAsset, uint256 rateMode) = abi.decode(params, (address, address, uint256));\\n\\n        // Close position & repay the flashLoan\\n        return closePosition(ape, apeAsset, borrowAsset, repayAmount, amountOwing, rateMode);\\n\\n      }\\n\\n  function closePosition(address ape, address apeAsset, address borrowAsset, uint256 repayAmount, uint256 amountOwing, uint256 rateMode) internal returns (bool) {\\n\\n    // Approve the lendingPool to transfer the repay amount\\n    IERC20(borrowAsset).approve(ADDRESSES_PROVIDER.getLendingPool(), repayAmount);\\n\\n    // Repay the amount owed\\n    LENDING_POOL().repay(\\n      borrowAsset,\\n      repayAmount,\\n      rateMode,\\n      ape\\n    );\\n\\n    // Calculate the amount available to withdraw (the smaller of the borrow allowance and the aToken balance)\\n    uint256 maxCollateralAmount = getAvailableBorrowInAsset(apeAsset, ape);\\n\\n    DataTypes.ReserveData memory reserve = getAaveAssetReserveData(apeAsset);\\n\\n    IERC20 _aToken = IERC20(reserve.aTokenAddress);\\n\\n    if(_aToken.balanceOf(ape) < maxCollateralAmount) {\\n      maxCollateralAmount = _aToken.balanceOf(ape);\\n    }\\n\\n    // transfer the aTokens to this address, then withdraw the Tokens from Aave\\n    _aToken.transferFrom(ape, address(this), maxCollateralAmount);\\n\\n    LENDING_POOL().withdraw(\\n      apeAsset,\\n      maxCollateralAmount,\\n      address(this)\\n    );\\n\\n    // Make the swap on Uniswap\\n    IERC20(apeAsset).approve(UNISWAP_ROUTER_ADDRESS, maxCollateralAmount);\\n\\n    uint[] memory amounts = uniswapTokensForExactTokens(amountOwing, maxCollateralAmount, apeAsset, borrowAsset);\\n\\n    // Deposit any leftover back into Aave on behalf of the user\\n    uint256 leftoverAmount = maxCollateralAmount.sub(amounts[0]);\\n\\n    if(leftoverAmount > 0) {\\n\\n      IERC20(apeAsset).approve(ADDRESSES_PROVIDER.getLendingPool(), leftoverAmount);\\n\\n      LENDING_POOL().deposit(\\n        apeAsset,\\n        leftoverAmount,\\n        ape,\\n        0\\n      );\\n    }\\n\\n    // Approve the Aave Lending Pool to recover the flashloaned amount\\n    IERC20(borrowAsset).approve(ADDRESSES_PROVIDER.getLendingPool(), amountOwing);\\n\\n    emit Ape(ape, 'close', apeAsset, borrowAsset, amountOwing, amounts[0], rateMode);\\n\\n    return true;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x48edd237d2cea37c881588fc54cd31cceb90a50752589d1030e7fde81b6e50cb\",\"license\":\"agpl-3.0\"},\"contracts/AaveUniswapBase.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; //https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\"; //https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\nimport \\\"./interfaces/ILendingPool.sol\\\";\\nimport \\\"./interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"./interfaces/IProtocolDataProvider.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport { DataTypes } from './libraries/DataTypes.sol';\\n\\ncontract AaveUniswapBase {\\n\\n  using SafeMath for uint256;\\n\\n  constructor(address lendingPoolAddressesProviderAddress, address uniswapRouterAddress) public {\\n    ADDRESSES_PROVIDER = ILendingPoolAddressesProvider(lendingPoolAddressesProviderAddress);\\n    UNISWAP_ROUTER = IUniswapV2Router02(uniswapRouterAddress);\\n    UNISWAP_ROUTER_ADDRESS = uniswapRouterAddress;\\n  }\\n\\n  ILendingPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\n  IUniswapV2Router02 public immutable UNISWAP_ROUTER;\\n  address public immutable UNISWAP_ROUTER_ADDRESS;\\n\\n  bytes32 public constant PROTOCOL_DATA_PROVIDER_LOOKUP = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n\\n  function LENDING_POOL() public view returns (ILendingPool) {\\n    address _lendingPoolAddress = ADDRESSES_PROVIDER.getLendingPool();\\n    return ILendingPool(_lendingPoolAddress);\\n  }\\n\\n  function getPriceOracle() internal view returns (IPriceOracleGetter) {\\n    address _priceOracleAddress = ADDRESSES_PROVIDER.getPriceOracle();\\n    return IPriceOracleGetter(_priceOracleAddress);\\n  }\\n\\n  function getProtocolDataProvider() internal view returns (IProtocolDataProvider)  {\\n    return IProtocolDataProvider(ADDRESSES_PROVIDER.getAddress(PROTOCOL_DATA_PROVIDER_LOOKUP));\\n  }\\n\\n  function getAaveAssetReserveData(address asset) public view returns (DataTypes.ReserveData memory) {\\n    return LENDING_POOL().getReserveData(asset);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xbd70b0d1544cdfb09da0121f0ed1a7c059e93a72ddce7c3a93282fa1ebd2a57b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n// pragma solidity 0.6.12;\\npragma solidity ^0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa1e107e828455162f0b63bfb3a5561f8a330d1e411e6d3c2476ef76464d4830f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n// pragma solidity 0.6.12;\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0x45d76f8a04196fdf5124d3a3e576fa381136e65147bf46c0c326961d5946584d\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n// pragma solidity 0.6.12;\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracleGetter {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\\n    function getSourceOfAsset(address _asset) external view returns(address);\\n    function getFallbackOracle() external view returns(address);\\n}\\n\",\"keccak256\":\"0x7dd292197721235b02d1509712bab1e042b74f5a99205ab205d598db06799f6c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n// pragma solidity 0.6.12;\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\n\\ninterface IProtocolDataProvider {\\n  struct TokenData {\\n    string symbol;\\n    address tokenAddress;\\n  }\\n\\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n  function getAllReservesTokens() external view returns (TokenData[] memory);\\n  function getAllATokens() external view returns (TokenData[] memory);\\n  function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\\n  function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\\n  function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\\n  function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\n}\\n\",\"keccak256\":\"0x1a7f8c54664da490cb5f38844cf218bb2cbc8e8af361ef97556b59dee39fe158\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n// pragma solidity 0.6.12;\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xd37c0271ed52c586ec861c07856912c88a32b904dabdda9ffda09df38366865e\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n// pragma solidity 0.6.12;\\npragma solidity ^0.8.0;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9a5975f2fdf5f02d95c1b35cc684530182fb8508518e245c9d7a8ae5e4c88373\",\"license\":\"agpl-3.0\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n// pragma solidity 0.6.12;\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x4c728d1aeba4e1250c968fc81ff41233813248b977db0157bcfe2aeb0cc1519f\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200255d3803806200255d83398101604081905262000034916200006e565b6001600160a01b039182166080521660a081905260c052620000a6565b80516001600160a01b03811681146200006957600080fd5b919050565b600080604083850312156200008257600080fd5b6200008d8362000051565b91506200009d6020840162000051565b90509250929050565b60805160a05160c05161242d620001306000396000818161015901528181610af50152818161138801526117980152600081816101c601528181610bf8015261189a01526000818160be01528181610404015281816106fb01528181610cd101528181610ec301528181610f3b01528181610ff10152818161145d01526115dc015261242d6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063923daa2a11610071578063923daa2a1461018e578063aed36ec1146101ae578063b4dcfc77146101b9578063d8264920146101c1578063eff278f3146101e8578063f4a74cce146101fd57600080fd5b80630542975c146100b9578063098df999146100fd57806324f5221f146101205780632c7ddded1461014157806379b3694314610154578063920f5c841461017b575b600080fd5b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011061010b366004611959565b610210565b60405190151581526020016100f4565b61013361012e36600461199f565b610246565b6040519081526020016100f4565b61013361014f3660046119d8565b6102d8565b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b610110610189366004611a50565b610400565b6101a161019c366004611b55565b610619565b6040516100f49190611b72565b610133600160f81b81565b6100e06106f6565b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b6101fb6101f6366004611c80565b61077b565b005b61011061020b366004611c80565b6109fd565b6000805b8281101561023a576102278686866109fd565b508061023281611cd7565b915050610214565b50600195945050505050565b6000806102516106f6565b604051632fe4a15f60e21b81526001600160a01b038581166004830152919091169063bf92857c9060240160c060405180830381865afa158015610299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bd9190611cf0565b505050925050506102ce84826102d8565b9150505b92915050565b6000806102e3610ebe565b60405163b3596f0760e01b81526001600160a01b038681166004830152919091169063b3596f0790602401602060405180830381865afa15801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190611d3a565b9050600061035b610f1f565b604051633e15014160e01b81526001600160a01b0387811660048301529190911690633e1501419060240161014060405180830381865afa1580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190611d68565b505050505050505050905060006103f6836103f084600a6103e99190611ee3565b8890610fb3565b90610fc6565b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190611efa565b6001600160a01b0316336001600160a01b0316146104fe5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c7920746865206c656e64696e6720706f6f6c2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b60648201526084015b60405180910390fd5b6001600160a01b03841630146105665760405162461bcd60e51b815260206004820152602760248201527f7468652061706520646964206e6f7420696e697469617465207468697320666c60448201526630b9b43637b0b760c91b60648201526084016104f5565b60008a8a600081811061057b5761057b611f17565b90506020020160208101906105909190611b55565b90506000898960008181106105a7576105a7611f17565b90506020020135905060006105de898960008181106105c8576105c8611f17565b9050602002013583610fd290919063ffffffff16565b9050600080806105f0888a018a611c80565b925092509250610604838388888886610fde565b96505050505050509998505050505050505050565b604080516101a08101825260006101808201818152825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526106896106f6565b6040516335ea6a7560e01b81526001600160a01b03848116600483015291909116906335ea6a759060240161018060405180830381865afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d2919061201d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d29190611efa565b600080610786610f1f565b6040516328dd2d0160e01b81526001600160a01b03868116600483015233602483015291909116906328dd2d019060440161012060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f9919061210a565b5050505050509250925050600083600103610815575081610820565b836002036108205750805b600081116108695760405162461bcd60e51b815260206004820152601660248201527552657175697265732064656274206f6e20416176652160501b60448201526064016104f5565b6040805160018082528183019092523091600091906020808301908036833701905050905086816000815181106108a2576108a2611f17565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905083816000815181106108f3576108f3611f17565b602090810291909101015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061093757610937611f17565b6020908102919091018101919091526040805133928101929092526001600160a01b038c168282015260608083018b90528151808403909101815260809092019052309060006109856106f6565b6001600160a01b031663ab9c4b5d888888888888886040518863ffffffff1660e01b81526004016109bc97969594939291906121f5565b600060405180830381600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b5050505050505050505050505050505050565b600080610a0a8433610246565b905060008111610a5c5760405162461bcd60e51b815260206004820152601860248201527f526571756972657320637265646974206f6e204161766521000000000000000060448201526064016104f5565b6000610a666106f6565b60405163a415bcad60e01b81526001600160a01b0387811660048301526024820185905260448201879052600060648301523360848301529192509082169063a415bcad9060a401600060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690528816925063095ea7b391506044016020604051808303816000875af1158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7391906122a7565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610ba957610ba9611f17565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600181518110610bdd57610bdd611f17565b6001600160a01b0392831660209182029290920101526000907f0000000000000000000000000000000000000000000000000000000000000000166338ed173985838530610c2c4260056122c2565b6040518663ffffffff1660e01b8152600401610c4c9594939291906122d5565b6000604051808303816000875af1158015610c6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c939190810190612311565b905060008160018351610ca691906123ab565b81518110610cb657610cb6611f17565b60200260200101519050886001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc291906122a7565b5060405163e8eda9df60e01b81526001600160a01b038a81166004830152602482018390523360448301526000606483015285169063e8eda9df90608401600060405180830381600087803b158015610e1a57600080fd5b505af1158015610e2e573d6000803e3d6000fd5b50506040805133815260e0602082018190526004908201526337b832b760e11b6101008201526001600160a01b038d8116828401528c1660608201526080810189905260a0810185905260c081018b905290517fed1a51b9740a2824e026a65b28e087347ef688d1217fe8b53e01f358b2340228935090819003610120019150a150600198975050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610757573d6000803e3d6000fd5b6040516321f8a72160e01b8152600160f81b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906321f8a72190602401602060405180830381865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190611efa565b905090565b6000610fbf82846123be565b9392505050565b6000610fbf82846123d5565b6000610fbf82846122c2565b6000846001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526044016020604051808303816000875af11580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e291906122a7565b506110eb6106f6565b60405163573ade8160e01b81526001600160a01b03878116600483015260248201879052604482018590528981166064830152919091169063573ade81906084016020604051808303816000875af115801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190611d3a565b50600061117c8789610246565b9050600061118988610619565b60e08101516040516370a0823160e01b81526001600160a01b038c8116600483015292935090918491908316906370a0823190602401602060405180830381865afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112009190611d3a565b1015611273576040516370a0823160e01b81526001600160a01b038b811660048301528216906370a0823190602401602060405180830381865afa15801561124c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112709190611d3a565b92505b6040516323b872dd60e01b81526001600160a01b038b81166004830152306024830152604482018590528216906323b872dd906064016020604051808303816000875af11580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec91906122a7565b506112f56106f6565b604051631a4ca37b60e21b81526001600160a01b038b811660048301526024820186905230604483015291909116906369328dec906064016020604051808303816000875af115801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113709190611d3a565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590528a169063095ea7b3906044016020604051808303816000875af11580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140491906122a7565b50600061141387858c8c611781565b905060006114448260008151811061142d5761142d611f17565b60200260200101518661193590919063ffffffff16565b905080156115cb578a6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd9190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e91906122a7565b506115576106f6565b60405163e8eda9df60e01b81526001600160a01b038d81166004830152602482018490528e8116604483015260006064830152919091169063e8eda9df90608401600060405180830381600087803b1580156115b257600080fd5b505af11580156115c6573d6000803e3d6000fd5b505050505b896001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165c9190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018b90526044016020604051808303816000875af11580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd91906122a7565b507fed1a51b9740a2824e026a65b28e087347ef688d1217fe8b53e01f358b23402288c8c8c8b8660008151811061170657611706611f17565b602090810291909101810151604080516001600160a01b03978816815260e093810184905260059381019390935264636c6f736560d81b61010084015294861682860152929094166060850152608084015260a083015260c082018a905251908190036101200190a15060019b9a5050505050505050505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590526060919084169063095ea7b3906044016020604051808303816000875af11580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181891906122a7565b50604080516002808252606082018352600092602083019080368337019050509050838160008151811061184e5761184e611f17565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061188257611882611f17565b6001600160a01b0392831660209182029290920101527f000000000000000000000000000000000000000000000000000000000000000016638803dbee878784306118ce4260056122c2565b6040518663ffffffff1660e01b81526004016118ee9594939291906122d5565b6000604051808303816000875af115801561190d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103f69190810190612311565b6000610fbf82846123ab565b6001600160a01b038116811461195657600080fd5b50565b6000806000806080858703121561196f57600080fd5b843561197a81611941565b9350602085013561198a81611941565b93969395505050506040820135916060013590565b600080604083850312156119b257600080fd5b82356119bd81611941565b915060208301356119cd81611941565b809150509250929050565b600080604083850312156119eb57600080fd5b82356119f681611941565b946020939093013593505050565b60008083601f840112611a1657600080fd5b50813567ffffffffffffffff811115611a2e57600080fd5b6020830191508360208260051b8501011115611a4957600080fd5b9250929050565b600080600080600080600080600060a08a8c031215611a6e57600080fd5b893567ffffffffffffffff80821115611a8657600080fd5b611a928d838e01611a04565b909b50995060208c0135915080821115611aab57600080fd5b611ab78d838e01611a04565b909950975060408c0135915080821115611ad057600080fd5b611adc8d838e01611a04565b909750955060608c01359150611af182611941565b90935060808b01359080821115611b0757600080fd5b818c0191508c601f830112611b1b57600080fd5b813581811115611b2a57600080fd5b8d6020828501011115611b3c57600080fd5b6020830194508093505050509295985092959850929598565b600060208284031215611b6757600080fd5b8135610fbf81611941565b815151815261018081016020830151611b9660208401826001600160801b03169052565b506040830151611bb160408401826001600160801b03169052565b506060830151611bcc60608401826001600160801b03169052565b506080830151611be760808401826001600160801b03169052565b5060a0830151611c0260a08401826001600160801b03169052565b5060c0830151611c1b60c084018264ffffffffff169052565b5060e0830151611c3660e08401826001600160a01b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015182169084015261014080850151909116908301526101609283015160ff16929091019190915290565b600080600060608486031215611c9557600080fd5b8335611ca081611941565b92506020840135611cb081611941565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b600060018201611ce957611ce9611cc1565b5060010190565b60008060008060008060c08789031215611d0957600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600060208284031215611d4c57600080fd5b5051919050565b80518015158114611d6357600080fd5b919050565b6000806000806000806000806000806101408b8d031215611d8857600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b01519550611db460a08c01611d53565b9450611dc260c08c01611d53565b9350611dd060e08c01611d53565b9250611ddf6101008c01611d53565b9150611dee6101208c01611d53565b90509295989b9194979a5092959850565b600181815b80851115611e3a578160001904821115611e2057611e20611cc1565b80851615611e2d57918102915b93841c9390800290611e04565b509250929050565b600082611e51575060016102d2565b81611e5e575060006102d2565b8160018114611e745760028114611e7e57611e9a565b60019150506102d2565b60ff841115611e8f57611e8f611cc1565b50506001821b6102d2565b5060208310610133831016604e8410600b8410161715611ebd575081810a6102d2565b611ec78383611dff565b8060001904821115611edb57611edb611cc1565b029392505050565b6000610fbf8383611e42565b8051611d6381611941565b600060208284031215611f0c57600080fd5b8151610fbf81611941565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611f6757611f67611f2d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f9657611f96611f2d565b604052919050565b600060208284031215611fb057600080fd5b6040516020810181811067ffffffffffffffff82111715611fd357611fd3611f2d565b6040529151825250919050565b80516001600160801b0381168114611d6357600080fd5b805164ffffffffff81168114611d6357600080fd5b805160ff81168114611d6357600080fd5b6000610180828403121561203057600080fd5b612038611f43565b6120428484611f9e565b815261205060208401611fe0565b602082015261206160408401611fe0565b604082015261207260608401611fe0565b606082015261208360808401611fe0565b608082015261209460a08401611fe0565b60a08201526120a560c08401611ff7565b60c08201526120b660e08401611eef565b60e08201526101006120c9818501611eef565b908201526101206120db848201611eef565b908201526101406120ed848201611eef565b908201526101606120ff84820161200c565b908201529392505050565b60008060008060008060008060006101208a8c03121561212957600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925061216360e08b01611ff7565b91506121726101008b01611d53565b90509295985092959850929598565b600081518084526020808501945080840160005b838110156121ba5781516001600160a01b031687529582019590820190600101612195565b509495945050505050565b600081518084526020808501945080840160005b838110156121ba578151875295820195908201906001016121d9565b600060018060a01b03808a168352602060e08185015261221860e085018b612181565b848103604086015261222a818b6121c5565b9050848103606086015261223e818a6121c5565b92881660808601525083820360a085015285518083529160005b83811015612273578781018301518282018401528201612258565b506000818401830152601f909201601f191690910101905061229b60c083018461ffff169052565b98975050505050505050565b6000602082840312156122b957600080fd5b610fbf82611d53565b808201808211156102d2576102d2611cc1565b85815284602082015260a0604082015260006122f460a0830186612181565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561232457600080fd5b825167ffffffffffffffff8082111561233c57600080fd5b818501915085601f83011261235057600080fd5b81518181111561236257612362611f2d565b8060051b9150612373848301611f6d565b818152918301840191848101908884111561238d57600080fd5b938501935b8385101561229b57845182529385019390850190612392565b818103818111156102d2576102d2611cc1565b80820281158282048414176102d2576102d2611cc1565b6000826123f257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ad18533828013ee1377101d3d76ea4251b959483d499c32fa33a51b6d9f66dcf64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063923daa2a11610071578063923daa2a1461018e578063aed36ec1146101ae578063b4dcfc77146101b9578063d8264920146101c1578063eff278f3146101e8578063f4a74cce146101fd57600080fd5b80630542975c146100b9578063098df999146100fd57806324f5221f146101205780632c7ddded1461014157806379b3694314610154578063920f5c841461017b575b600080fd5b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011061010b366004611959565b610210565b60405190151581526020016100f4565b61013361012e36600461199f565b610246565b6040519081526020016100f4565b61013361014f3660046119d8565b6102d8565b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b610110610189366004611a50565b610400565b6101a161019c366004611b55565b610619565b6040516100f49190611b72565b610133600160f81b81565b6100e06106f6565b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b6101fb6101f6366004611c80565b61077b565b005b61011061020b366004611c80565b6109fd565b6000805b8281101561023a576102278686866109fd565b508061023281611cd7565b915050610214565b50600195945050505050565b6000806102516106f6565b604051632fe4a15f60e21b81526001600160a01b038581166004830152919091169063bf92857c9060240160c060405180830381865afa158015610299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bd9190611cf0565b505050925050506102ce84826102d8565b9150505b92915050565b6000806102e3610ebe565b60405163b3596f0760e01b81526001600160a01b038681166004830152919091169063b3596f0790602401602060405180830381865afa15801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190611d3a565b9050600061035b610f1f565b604051633e15014160e01b81526001600160a01b0387811660048301529190911690633e1501419060240161014060405180830381865afa1580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190611d68565b505050505050505050905060006103f6836103f084600a6103e99190611ee3565b8890610fb3565b90610fc6565b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190611efa565b6001600160a01b0316336001600160a01b0316146104fe5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c7920746865206c656e64696e6720706f6f6c2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b60648201526084015b60405180910390fd5b6001600160a01b03841630146105665760405162461bcd60e51b815260206004820152602760248201527f7468652061706520646964206e6f7420696e697469617465207468697320666c60448201526630b9b43637b0b760c91b60648201526084016104f5565b60008a8a600081811061057b5761057b611f17565b90506020020160208101906105909190611b55565b90506000898960008181106105a7576105a7611f17565b90506020020135905060006105de898960008181106105c8576105c8611f17565b9050602002013583610fd290919063ffffffff16565b9050600080806105f0888a018a611c80565b925092509250610604838388888886610fde565b96505050505050509998505050505050505050565b604080516101a08101825260006101808201818152825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526106896106f6565b6040516335ea6a7560e01b81526001600160a01b03848116600483015291909116906335ea6a759060240161018060405180830381865afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d2919061201d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d29190611efa565b600080610786610f1f565b6040516328dd2d0160e01b81526001600160a01b03868116600483015233602483015291909116906328dd2d019060440161012060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f9919061210a565b5050505050509250925050600083600103610815575081610820565b836002036108205750805b600081116108695760405162461bcd60e51b815260206004820152601660248201527552657175697265732064656274206f6e20416176652160501b60448201526064016104f5565b6040805160018082528183019092523091600091906020808301908036833701905050905086816000815181106108a2576108a2611f17565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905083816000815181106108f3576108f3611f17565b602090810291909101015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061093757610937611f17565b6020908102919091018101919091526040805133928101929092526001600160a01b038c168282015260608083018b90528151808403909101815260809092019052309060006109856106f6565b6001600160a01b031663ab9c4b5d888888888888886040518863ffffffff1660e01b81526004016109bc97969594939291906121f5565b600060405180830381600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b5050505050505050505050505050505050565b600080610a0a8433610246565b905060008111610a5c5760405162461bcd60e51b815260206004820152601860248201527f526571756972657320637265646974206f6e204161766521000000000000000060448201526064016104f5565b6000610a666106f6565b60405163a415bcad60e01b81526001600160a01b0387811660048301526024820185905260448201879052600060648301523360848301529192509082169063a415bcad9060a401600060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690528816925063095ea7b391506044016020604051808303816000875af1158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7391906122a7565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610ba957610ba9611f17565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600181518110610bdd57610bdd611f17565b6001600160a01b0392831660209182029290920101526000907f0000000000000000000000000000000000000000000000000000000000000000166338ed173985838530610c2c4260056122c2565b6040518663ffffffff1660e01b8152600401610c4c9594939291906122d5565b6000604051808303816000875af1158015610c6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c939190810190612311565b905060008160018351610ca691906123ab565b81518110610cb657610cb6611f17565b60200260200101519050886001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc291906122a7565b5060405163e8eda9df60e01b81526001600160a01b038a81166004830152602482018390523360448301526000606483015285169063e8eda9df90608401600060405180830381600087803b158015610e1a57600080fd5b505af1158015610e2e573d6000803e3d6000fd5b50506040805133815260e0602082018190526004908201526337b832b760e11b6101008201526001600160a01b038d8116828401528c1660608201526080810189905260a0810185905260c081018b905290517fed1a51b9740a2824e026a65b28e087347ef688d1217fe8b53e01f358b2340228935090819003610120019150a150600198975050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610757573d6000803e3d6000fd5b6040516321f8a72160e01b8152600160f81b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906321f8a72190602401602060405180830381865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190611efa565b905090565b6000610fbf82846123be565b9392505050565b6000610fbf82846123d5565b6000610fbf82846122c2565b6000846001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526044016020604051808303816000875af11580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e291906122a7565b506110eb6106f6565b60405163573ade8160e01b81526001600160a01b03878116600483015260248201879052604482018590528981166064830152919091169063573ade81906084016020604051808303816000875af115801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190611d3a565b50600061117c8789610246565b9050600061118988610619565b60e08101516040516370a0823160e01b81526001600160a01b038c8116600483015292935090918491908316906370a0823190602401602060405180830381865afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112009190611d3a565b1015611273576040516370a0823160e01b81526001600160a01b038b811660048301528216906370a0823190602401602060405180830381865afa15801561124c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112709190611d3a565b92505b6040516323b872dd60e01b81526001600160a01b038b81166004830152306024830152604482018590528216906323b872dd906064016020604051808303816000875af11580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec91906122a7565b506112f56106f6565b604051631a4ca37b60e21b81526001600160a01b038b811660048301526024820186905230604483015291909116906369328dec906064016020604051808303816000875af115801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113709190611d3a565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590528a169063095ea7b3906044016020604051808303816000875af11580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140491906122a7565b50600061141387858c8c611781565b905060006114448260008151811061142d5761142d611f17565b60200260200101518661193590919063ffffffff16565b905080156115cb578a6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd9190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e91906122a7565b506115576106f6565b60405163e8eda9df60e01b81526001600160a01b038d81166004830152602482018490528e8116604483015260006064830152919091169063e8eda9df90608401600060405180830381600087803b1580156115b257600080fd5b505af11580156115c6573d6000803e3d6000fd5b505050505b896001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165c9190611efa565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018b90526044016020604051808303816000875af11580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd91906122a7565b507fed1a51b9740a2824e026a65b28e087347ef688d1217fe8b53e01f358b23402288c8c8c8b8660008151811061170657611706611f17565b602090810291909101810151604080516001600160a01b03978816815260e093810184905260059381019390935264636c6f736560d81b61010084015294861682860152929094166060850152608084015260a083015260c082018a905251908190036101200190a15060019b9a5050505050505050505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590526060919084169063095ea7b3906044016020604051808303816000875af11580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181891906122a7565b50604080516002808252606082018352600092602083019080368337019050509050838160008151811061184e5761184e611f17565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061188257611882611f17565b6001600160a01b0392831660209182029290920101527f000000000000000000000000000000000000000000000000000000000000000016638803dbee878784306118ce4260056122c2565b6040518663ffffffff1660e01b81526004016118ee9594939291906122d5565b6000604051808303816000875af115801561190d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103f69190810190612311565b6000610fbf82846123ab565b6001600160a01b038116811461195657600080fd5b50565b6000806000806080858703121561196f57600080fd5b843561197a81611941565b9350602085013561198a81611941565b93969395505050506040820135916060013590565b600080604083850312156119b257600080fd5b82356119bd81611941565b915060208301356119cd81611941565b809150509250929050565b600080604083850312156119eb57600080fd5b82356119f681611941565b946020939093013593505050565b60008083601f840112611a1657600080fd5b50813567ffffffffffffffff811115611a2e57600080fd5b6020830191508360208260051b8501011115611a4957600080fd5b9250929050565b600080600080600080600080600060a08a8c031215611a6e57600080fd5b893567ffffffffffffffff80821115611a8657600080fd5b611a928d838e01611a04565b909b50995060208c0135915080821115611aab57600080fd5b611ab78d838e01611a04565b909950975060408c0135915080821115611ad057600080fd5b611adc8d838e01611a04565b909750955060608c01359150611af182611941565b90935060808b01359080821115611b0757600080fd5b818c0191508c601f830112611b1b57600080fd5b813581811115611b2a57600080fd5b8d6020828501011115611b3c57600080fd5b6020830194508093505050509295985092959850929598565b600060208284031215611b6757600080fd5b8135610fbf81611941565b815151815261018081016020830151611b9660208401826001600160801b03169052565b506040830151611bb160408401826001600160801b03169052565b506060830151611bcc60608401826001600160801b03169052565b506080830151611be760808401826001600160801b03169052565b5060a0830151611c0260a08401826001600160801b03169052565b5060c0830151611c1b60c084018264ffffffffff169052565b5060e0830151611c3660e08401826001600160a01b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015182169084015261014080850151909116908301526101609283015160ff16929091019190915290565b600080600060608486031215611c9557600080fd5b8335611ca081611941565b92506020840135611cb081611941565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b600060018201611ce957611ce9611cc1565b5060010190565b60008060008060008060c08789031215611d0957600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600060208284031215611d4c57600080fd5b5051919050565b80518015158114611d6357600080fd5b919050565b6000806000806000806000806000806101408b8d031215611d8857600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b01519550611db460a08c01611d53565b9450611dc260c08c01611d53565b9350611dd060e08c01611d53565b9250611ddf6101008c01611d53565b9150611dee6101208c01611d53565b90509295989b9194979a5092959850565b600181815b80851115611e3a578160001904821115611e2057611e20611cc1565b80851615611e2d57918102915b93841c9390800290611e04565b509250929050565b600082611e51575060016102d2565b81611e5e575060006102d2565b8160018114611e745760028114611e7e57611e9a565b60019150506102d2565b60ff841115611e8f57611e8f611cc1565b50506001821b6102d2565b5060208310610133831016604e8410600b8410161715611ebd575081810a6102d2565b611ec78383611dff565b8060001904821115611edb57611edb611cc1565b029392505050565b6000610fbf8383611e42565b8051611d6381611941565b600060208284031215611f0c57600080fd5b8151610fbf81611941565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611f6757611f67611f2d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f9657611f96611f2d565b604052919050565b600060208284031215611fb057600080fd5b6040516020810181811067ffffffffffffffff82111715611fd357611fd3611f2d565b6040529151825250919050565b80516001600160801b0381168114611d6357600080fd5b805164ffffffffff81168114611d6357600080fd5b805160ff81168114611d6357600080fd5b6000610180828403121561203057600080fd5b612038611f43565b6120428484611f9e565b815261205060208401611fe0565b602082015261206160408401611fe0565b604082015261207260608401611fe0565b606082015261208360808401611fe0565b608082015261209460a08401611fe0565b60a08201526120a560c08401611ff7565b60c08201526120b660e08401611eef565b60e08201526101006120c9818501611eef565b908201526101206120db848201611eef565b908201526101406120ed848201611eef565b908201526101606120ff84820161200c565b908201529392505050565b60008060008060008060008060006101208a8c03121561212957600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925061216360e08b01611ff7565b91506121726101008b01611d53565b90509295985092959850929598565b600081518084526020808501945080840160005b838110156121ba5781516001600160a01b031687529582019590820190600101612195565b509495945050505050565b600081518084526020808501945080840160005b838110156121ba578151875295820195908201906001016121d9565b600060018060a01b03808a168352602060e08185015261221860e085018b612181565b848103604086015261222a818b6121c5565b9050848103606086015261223e818a6121c5565b92881660808601525083820360a085015285518083529160005b83811015612273578781018301518282018401528201612258565b506000818401830152601f909201601f191690910101905061229b60c083018461ffff169052565b98975050505050505050565b6000602082840312156122b957600080fd5b610fbf82611d53565b808201808211156102d2576102d2611cc1565b85815284602082015260a0604082015260006122f460a0830186612181565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561232457600080fd5b825167ffffffffffffffff8082111561233c57600080fd5b818501915085601f83011261235057600080fd5b81518181111561236257612362611f2d565b8060051b9150612373848301611f6d565b818152918301840191848101908884111561238d57600080fd5b938501935b8385101561229b57845182529385019390850190612392565b818103818111156102d2576102d2611cc1565b80820281158282048414176102d2576102d2611cc1565b6000826123f257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ad18533828013ee1377101d3d76ea4251b959483d499c32fa33a51b6d9f66dcf64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}